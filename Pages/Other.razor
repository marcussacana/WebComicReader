@page "/Other"
@inject NavigationManager NavManager
@inject IJSRuntime Runtime


@if (BookLoader.Pages?.Length > 0)
{
    <div align="center" style="overflow-y: scroll; background-color: black; height: 100vh;">
        @for (int i = 0; i < BookLoader.Pages.Length; i++)
        {
            bool IsFirst = i == 0;
            bool IsLast = i + 1 >= BookLoader.Pages.Length;
            if (IsLast)
            {
                <img src="" style="max-width:100%;" id="img@(i)" /><br />
                continue;
            }
            if (IsFirst)
            {
                <img src="@BookLoader.Pages[i]" style="max-width:100%;" id="img@(i)" onload="img@(i+1).src = '@BookLoader.Pages[i+1]'" onerror="img@(i+1).src = '@BookLoader.Pages[i+1]'" /><br />
                continue;
            }
            <img src="" style="max-width:100%;" id="img@(i)" onload="img@(i+1).src = '@BookLoader.Pages[i+1]'" onerror="img@(i+1).src = '@BookLoader.Pages[i+1]'" /><br />
        }
        <EmbeddedControl/>
    </div>
}

@code {

    protected override async Task OnInitializedAsync()
    {
        Program.Runtime = Runtime;
        if (BookLoader.Pages == null || BookLoader.Pages.Length == 0)
            await NavManager.NavigateToHome();

        await base.OnInitializedAsync();
    }
}
