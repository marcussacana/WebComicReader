@page "/"
@using System.IO;
@using Tewr.Blazor.FileReader;
@inject IJSRuntime Runtime
@inject IFileReaderService fileReaderService
@inject NavigationManager NavManager

<img src="icon-512.png" style="position: relative; left: calc(50% - 256px);">
<p class="text-right d-md-flex justify-content-md-end align-items-md-end">Prototype v0.5.3</p>
<input type="file" id="comic" name="comic" @ref="InputFile" @onchange="Open" multiple hidden>

@switch (Mode)
{
    default:
        <p class="text-center">
            <button class="btn btn-primary" type="button" onclick="OpenFile()">Select Book</button>
        </p>
        break;
    case 1:
        <div class="progress" style="height: 20px;">
            <div class="progress-bar" style="width: @(Progress+"%");">@(Progress+"%")</div>
        </div>
        break;
    case 2:
        <p class="text-center">
            <select required="required" class="form-control" @onchange="OnModeChanged">
                <option value="" selected="selected">Select a Mode</option>
                <option value="Manga">Manga</option>
                <option value="Comic">Comic</option>
                <option value="Other">Other</option>
            </select>
            <select class="form-control" @onchange="OnWidthChanged">
                <option value="" selected="selected">Last Width</option>
                <option value="-50">-50</option>
                <option value="-100">-100</option>
                <option value="-150">-150</option>
                <option value="-200">-200</option>
                <option value="-250">-250</option>
                <option value="-300">-300</option>
            </select>
            <button type="button" class="btn btn-primary" @onclick="Read">Read</button>
        </p>
        break;
}

@code {
    ElementReference InputFile;
    int Mode = 0;
    int Progress;
    string Reader = null;
    public async Task Open()
    {
        BookLoader.BlobHelper = new Blob(Runtime);
        Program.Runtime = Runtime;

        var SelectedFiles = await fileReaderService.CreateReference(InputFile).EnumerateFilesAsync();

        if (SelectedFiles.Count() == 1)
        {
            var Reader = SelectedFiles.First();
            var FileInfo = await Reader.ReadFileInfoAsync();

            using Stream Comic = await Reader.OpenReadAsync();
            using MemoryStream Buffer = new MemoryStream();
            await Comic.CopyToAsync(Buffer);
            Comic.Close();

            Mode = 1;
            StateHasChanged();

            Buffer.Position = 0;
            await BookLoader.OpenArchive(FileInfo.Name, Buffer, OnProgressChanged);
        }
        else
        {

            Mode = 1;
            StateHasChanged();

            string[] Names = new string[SelectedFiles.Count()];
            Stream[] Pages = new Stream[SelectedFiles.Count()];
            for (int i = 0; i < Pages.Length; i++)
            {
                OnProgressChanged(Program.Percentage(i, Pages.Length * 2));
                var Reader = SelectedFiles.ElementAt(i);
                Names[i] = (await Reader.ReadFileInfoAsync()).Name;
                Pages[i] = await Reader.OpenReadAsync();
            }

            await BookLoader.OpenPages(Names, Pages, OnProgressChanged);
        }

        Mode = 2;
        StateHasChanged();
    }

    public void OnProgressChanged(int Progress)
    {
        this.Progress = Progress;
        StateHasChanged();
    }

    public async Task Read()
    {
        await Runtime.InvokeVoidAsync("Fullscreen");
        NavManager.NavigateTo(Reader);
    }

    public async Task OnModeChanged(ChangeEventArgs Args)
    {
        Reader = (string)Args.Value;
    }
    public async Task OnWidthChanged(ChangeEventArgs Args)
    {
        await Runtime.InvokeVoidAsync("SetWidthDiff", (int.Parse((string)Args.Value)));
    }
}
